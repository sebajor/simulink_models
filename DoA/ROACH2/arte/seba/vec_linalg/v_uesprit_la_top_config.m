
function v_uesprit_la_top_config(this_block)

  % Revision History:
  %
  %   03-May-2021  (10:16 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /home/seba/Workspace/simulink_models/DoA/ROACH2/arte/seba/vec_linalg/v_uesprit_la_top.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('v_uesprit_la_top');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('din1_re');
  this_block.addSimulinkInport('din1_im');
  this_block.addSimulinkInport('din2_re');
  this_block.addSimulinkInport('din2_im');
  this_block.addSimulinkInport('din_valid');
  this_block.addSimulinkInport('new_acc');
  this_block.addSimulinkInport('shift');

  this_block.addSimulinkOutport('r11');
  this_block.addSimulinkOutport('r22');
  this_block.addSimulinkOutport('r12_re');
  this_block.addSimulinkOutport('corr_valid');
  this_block.addSimulinkOutport('lamb1');
  this_block.addSimulinkOutport('lamb2');
  this_block.addSimulinkOutport('eigen1_y');
  this_block.addSimulinkOutport('eigen2_y');
  this_block.addSimulinkOutport('eigen_x');
  this_block.addSimulinkOutport('dout_valid');

  r11_port = this_block.port('r11');
  r11_port.setType('UFix_16_0');
  r22_port = this_block.port('r22');
  r22_port.setType('UFix_16_0');
  r12_re_port = this_block.port('r12_re');
  r12_re_port.setType('UFix_16_0');
  corr_valid_port = this_block.port('corr_valid');
  corr_valid_port.setType('UFix_1_0');
  corr_valid_port.useHDLVector(false);
  lamb1_port = this_block.port('lamb1');
  lamb1_port.setType('UFix_16_0');
  lamb2_port = this_block.port('lamb2');
  lamb2_port.setType('UFix_16_0');
  eigen1_y_port = this_block.port('eigen1_y');
  eigen1_y_port.setType('UFix_16_0');
  eigen2_y_port = this_block.port('eigen2_y');
  eigen2_y_port.setType('UFix_16_0');
  eigen_x_port = this_block.port('eigen_x');
  eigen_x_port.setType('UFix_16_0');
  dout_valid_port = this_block.port('dout_valid');
  dout_valid_port.setType('UFix_1_0');
  dout_valid_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('din1_re').width ~= 18);
      this_block.setError('Input data type for port "din1_re" must have width=18.');
    end

    if (this_block.port('din1_im').width ~= 18);
      this_block.setError('Input data type for port "din1_im" must have width=18.');
    end

    if (this_block.port('din2_re').width ~= 18);
      this_block.setError('Input data type for port "din2_re" must have width=18.');
    end

    if (this_block.port('din2_im').width ~= 18);
      this_block.setError('Input data type for port "din2_im" must have width=18.');
    end

    if (this_block.port('din_valid').width ~= 1);
      this_block.setError('Input data type for port "din_valid" must have width=1.');
    end

    this_block.port('din_valid').useHDLVector(false);

    if (this_block.port('new_acc').width ~= 1);
      this_block.setError('Input data type for port "new_acc" must have width=1.');
    end

    this_block.port('new_acc').useHDLVector(false);

    if (this_block.port('shift').width ~= 5);
      this_block.setError('Input data type for port "shift" must have width=5.');
    end

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('DIN_WIDTH','integer','18');
  this_block.addGeneric('DIN_POINT','integer','17');
  this_block.addGeneric('VECTOR_LEN','integer','512');
  this_block.addGeneric('CORR_WIDTH','integer','24');
  this_block.addGeneric('CORR_POINT','integer','17');
  this_block.addGeneric('CORR_DOUT_WIDTH','integer','32');
  this_block.addGeneric('LA_IN_WIDTH','integer','16');
  this_block.addGeneric('LA_IN_POINT','integer','15');
  this_block.addGeneric('SQRT_IN_WIDTH','integer','10');
  this_block.addGeneric('SQRT_IN_POINT','integer','7');
  this_block.addGeneric('DOUT_WIDTH','integer','16');
  this_block.addGeneric('DOUT_POINT','integer','13');
  this_block.addGeneric('SQRT_FILE','string','"/home/seba/Workspace/simulink_models/DoA/ROACH2/arte/seba/vec_linalg/sqrt.hex"');

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  path = '/home/seba/Workspace/simulink_models/DoA/ROACH2/arte/seba/vec_linalg/';

  %here we include all the hdls 
  this_block.addFile(strcat(path,'rtl/dsp48_mult.v'));
  this_block.addFile(strcat(path,'rtl/signed_cast.v'));
  this_block.addFile(strcat(path,'rtl/rom.v'));
  this_block.addFile(strcat(path,'rtl/sqrt_lut.v'));
  this_block.addFile(strcat(path,'rtl/quad_root.v'));
  this_block.addFile(strcat(path,'rtl/eigen.v'));
  this_block.addFile(strcat(path,'rtl/correlation_matrix.v'));
  this_block.addFile(strcat(path,'rtl/correlation_mults.v'));
  this_block.addFile(strcat(path,'rtl/complex_power.v'));
  this_block.addFile(strcat(path,'rtl/complex_mult.v'));
  this_block.addFile(strcat(path,'rtl/signed_vector_acc.v'));
  this_block.addFile(strcat(path,'rtl/bram_infer.v'));
  this_block.addFile(strcat(path,'rtl/unsigned_vector_acc.v'));
  this_block.addFile(strcat(path,'rtl/centrosym_matrix.v'));
  this_block.addFile(strcat(path,'rtl/vector_uesprit.v'));
  this_block.addFile(strcat(path,'rtl/v_uesprit_la.v'));
  %arctan
  this_block.addFile(strcat(path,'rtl/fifo_sync.v'));
  this_block.addFile(strcat(path,'rtl/priority_encoder.v'));
  this_block.addFile(strcat(path,'rtl/first_one_finder.v'));
  this_block.addFile(strcat(path,'rtl/autoscale.v'));
  this_block.addFile(strcat(path,'rtl/arctan.v'));
  this_block.addFile(strcat(path,'rtl/arctan2.v'));

  this_block.addFile(strcat(path,'v_uesprit_la_top.v'));

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

