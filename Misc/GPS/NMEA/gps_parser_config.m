
function gps_parser_config(this_block)

  % Revision History:
  %
  %   14-Dec-2020  (21:08 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /home/seba/Workspace/ise/models/gps/gps_parser.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('gps_parser');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  %this_block.tagAsCombinational;

  this_block.addSimulinkInport('rst');
  this_block.addSimulinkInport('program_ublox');
  this_block.addSimulinkInport('read_time');
  this_block.addSimulinkInport('ublox_rx');

  this_block.addSimulinkOutport('data_index');
  this_block.addSimulinkOutport('valid_data');
  this_block.addSimulinkOutport('time_data');
  this_block.addSimulinkOutport('led_out');
  this_block.addSimulinkOutport('ublox_tx');

  data_index_port = this_block.port('data_index');
  data_index_port.setType('UFix_6_0');
  valid_data_port = this_block.port('valid_data');
  valid_data_port.setType('UFix_1_0');
  valid_data_port.useHDLVector(false);
  time_data_port = this_block.port('time_data');
  time_data_port.setType('UFix_8_0');
  led_out_port = this_block.port('led_out');
  led_out_port.setType('UFix_1_0');
  led_out_port.useHDLVector(false);
  ublox_tx_port = this_block.port('ublox_tx');
  ublox_tx_port.setType('UFix_1_0');
  ublox_tx_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('rst').width ~= 1);
      this_block.setError('Input data type for port "rst" must have width=1.');
    end

    this_block.port('rst').useHDLVector(false);

    if (this_block.port('program_ublox').width ~= 1);
      this_block.setError('Input data type for port "program_ublox" must have width=1.');
    end

    this_block.port('program_ublox').useHDLVector(false);

    if (this_block.port('read_time').width ~= 1);
      this_block.setError('Input data type for port "read_time" must have width=1.');
    end

    this_block.port('read_time').useHDLVector(false);

    if (this_block.port('ublox_rx').width ~= 1);
      this_block.setError('Input data type for port "ublox_rx" must have width=1.');
    end

    this_block.port('ublox_rx').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  %this_block.addGeneric('CLK_FREQ','','');
  this_block.addGeneric('CLK_FREQ', 'integer', '100000000');
  this_block.addGeneric('BAUD_RATE','integer','9600');
  this_block.addGeneric('MSG_LEN','integer','29');
  this_block.addGeneric('PATTERN_SIZE','integer','6');
  this_block.addGeneric('INFO_SIZE','integer','22');
  this_block.addGeneric('MEM_FILE','string','"gold_hex.mem"');

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('rtl/gold_hex.mem');
  this_block.addFile('rtl/gpszda.mem');
  this_block.addFile('rtl/uart_tx.v');
  this_block.addFile('rtl/uart_rx.v');
  this_block.addFile('rtl/pattern_search.v');
  this_block.addFile('rtl/send_msg.v');
  this_block.addFile('rtl/gps_parser.v');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

