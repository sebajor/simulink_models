
function irig_time_top_config(this_block)

  % Revision History:
  %
  %   17-Nov-2021  (18:11 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /home/Workspace/seba/irig_debug/irig_time_top.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('irig_time_top');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  %this_block.tagAsCombinational;

  this_block.addSimulinkInport('rst');
  this_block.addSimulinkInport('calibrate');
  this_block.addSimulinkInport('cont');
  this_block.addSimulinkInport('one_count');
  this_block.addSimulinkInport('zero_count');
  this_block.addSimulinkInport('id_count');
  this_block.addSimulinkInport('debounce');
  this_block.addSimulinkInport('din');

  this_block.addSimulinkOutport('first_sec');
  this_block.addSimulinkOutport('first_min');
  this_block.addSimulinkOutport('first_hr');
  this_block.addSimulinkOutport('first_day');
  this_block.addSimulinkOutport('bcd_valid');
  this_block.addSimulinkOutport('sec');
  this_block.addSimulinkOutport('min');
  this_block.addSimulinkOutport('hr');
  this_block.addSimulinkOutport('day');
  this_block.addSimulinkOutport('subsec');
  this_block.addSimulinkOutport('pps');
  this_block.addSimulinkOutport('irig_bit');
  this_block.addSimulinkOutport('irig_bit_valid');
  this_block.addSimulinkOutport('state_out');

  first_sec_port = this_block.port('first_sec');
  first_sec_port.setType('UFix_6_0');
  first_min_port = this_block.port('first_min');
  first_min_port.setType('UFix_6_0');
  first_hr_port = this_block.port('first_hr');
  first_hr_port.setType('UFix_5_0');
  first_day_port = this_block.port('first_day');
  first_day_port.setType('UFix_9_0');
  bcd_valid_port = this_block.port('bcd_valid');
  bcd_valid_port.setType('UFix_1_0');
  bcd_valid_port.useHDLVector(false);
  sec_port = this_block.port('sec');
  sec_port.setType('UFix_6_0');
  min_port = this_block.port('min');
  min_port.setType('UFix_6_0');
  hr_port = this_block.port('hr');
  hr_port.setType('UFix_5_0');
  day_port = this_block.port('day');
  day_port.setType('UFix_9_0');
  subsec_port = this_block.port('subsec');
  subsec_port.setType('UFix_32_0');
  pps_port = this_block.port('pps');
  pps_port.setType('UFix_1_0');
  pps_port.useHDLVector(false);
  irig_bit_port = this_block.port('irig_bit');
  irig_bit_port.setType('UFix_2_0');
  irig_bit_valid_port = this_block.port('irig_bit_valid');
  irig_bit_valid_port.setType('UFix_1_0');
  irig_bit_valid_port.useHDLVector(false);
  state_out_port = this_block.port('state_out');
  state_out_port.setType('UFix_4_0');

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('rst').width ~= 1);
      this_block.setError('Input data type for port "rst" must have width=1.');
    end

    this_block.port('rst').useHDLVector(false);

    if (this_block.port('calibrate').width ~= 1);
      this_block.setError('Input data type for port "calibrate" must have width=1.');
    end

    this_block.port('calibrate').useHDLVector(false);

    if (this_block.port('cont').width ~= 1);
      this_block.setError('Input data type for port "cont" must have width=1.');
    end

    this_block.port('cont').useHDLVector(false);

    if (this_block.port('one_count').width ~= 32);
      this_block.setError('Input data type for port "one_count" must have width=32.');
    end

    if (this_block.port('zero_count').width ~= 32);
      this_block.setError('Input data type for port "zero_count" must have width=32.');
    end

    if (this_block.port('id_count').width ~= 32);
      this_block.setError('Input data type for port "id_count" must have width=32.');
    end

    if (this_block.port('debounce').width ~= 32);
      this_block.setError('Input data type for port "debounce" must have width=32.');
    end

    if (this_block.port('din').width ~= 1);
      this_block.setError('Input data type for port "din" must have width=1.');
    end

    this_block.port('din').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('rtl/irig_bit_parser.v');
  this_block.addFile('rtl/irig_bcd.v');
  this_block.addFile('rtl/irig_time.v');
  this_block.addFile('rtl/irig_time_top.v');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

