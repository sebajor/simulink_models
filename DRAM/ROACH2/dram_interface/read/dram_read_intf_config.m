
function dram_read_intf_config(this_block)

  % Revision History:
  %
  %   07-Mar-2022  (12:07 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     /home/seba/Workspace/simulink_models/DRAM/ROACH2/dram_interface/read/dram_read_intf.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('dram_read_intf');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('rst');
  this_block.addSimulinkInport('read_en');
  this_block.addSimulinkInport('burst_len');
  this_block.addSimulinkInport('next_burst');
  this_block.addSimulinkInport('repeat_burst');
  this_block.addSimulinkInport('rd_ack');
  this_block.addSimulinkInport('cmd_ack');
  this_block.addSimulinkInport('dram_data');
  this_block.addSimulinkInport('rd_tag');
  this_block.addSimulinkInport('rd_valid');

  this_block.addSimulinkOutport('burst_done');
  this_block.addSimulinkOutport('finish');
  this_block.addSimulinkOutport('dram_addr');
  this_block.addSimulinkOutport('rwn');
  this_block.addSimulinkOutport('cmd_valid');
  this_block.addSimulinkOutport('read_data');
  this_block.addSimulinkOutport('read_valid');

  burst_done_port = this_block.port('burst_done');
  burst_done_port.setType('UFix_1_0');
  burst_done_port.useHDLVector(false);
  finish_port = this_block.port('finish');
  finish_port.setType('UFix_1_0');
  finish_port.useHDLVector(false);
  dram_addr_port = this_block.port('dram_addr');
  dram_addr_port.setType('UFix_25_0');
  rwn_port = this_block.port('rwn');
  rwn_port.setType('UFix_1_0');
  rwn_port.useHDLVector(false);
  cmd_valid_port = this_block.port('cmd_valid');
  cmd_valid_port.setType('UFix_1_0');
  cmd_valid_port.useHDLVector(false);
  read_data_port = this_block.port('read_data');
  read_data_port.setType('UFix_288_0');
  read_valid_port = this_block.port('read_valid');
  read_valid_port.setType('UFix_1_0');
  read_valid_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('rst').width ~= 1);
      this_block.setError('Input data type for port "rst" must have width=1.');
    end

    this_block.port('rst').useHDLVector(false);

    if (this_block.port('read_en').width ~= 1);
      this_block.setError('Input data type for port "read_en" must have width=1.');
    end

    this_block.port('read_en').useHDLVector(false);

    if (this_block.port('burst_len').width ~= 32);
      this_block.setError('Input data type for port "burst_len" must have width=32.');
    end

    if (this_block.port('next_burst').width ~= 1);
      this_block.setError('Input data type for port "next_burst" must have width=1.');
    end

    this_block.port('next_burst').useHDLVector(false);

    if (this_block.port('repeat_burst').width ~= 1);
      this_block.setError('Input data type for port "repeat_burst" must have width=1.');
    end

    this_block.port('repeat_burst').useHDLVector(false);

    if (this_block.port('rd_ack').width ~= 1);
      this_block.setError('Input data type for port "rd_ack" must have width=1.');
    end

    this_block.port('rd_ack').useHDLVector(false);

    if (this_block.port('cmd_ack').width ~= 1);
      this_block.setError('Input data type for port "cmd_ack" must have width=1.');
    end

    this_block.port('cmd_ack').useHDLVector(false);

    if (this_block.port('dram_data').width ~= 288);
      this_block.setError('Input data type for port "dram_data" must have width=288.');
    end

    if (this_block.port('rd_tag').width ~= 1);
      this_block.setError('Input data type for port "rd_tag" must have width=1.');
    end

    this_block.port('rd_tag').useHDLVector(false);

    if (this_block.port('rd_valid').width ~= 1);
      this_block.setError('Input data type for port "rd_valid" must have width=1.');
    end

    this_block.port('rd_valid').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk','ce')
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('rtl/roach_dram_read.v');
  this_block.addFile('dram_read_intf.v');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

